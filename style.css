/* style.css */

/* Variables pour une customisation facile */
:root {
    --bg-color: #121212;
    --surface-color: #1e1e1e;
    --primary-color: #007bff;
    --text-color: #e0e0e0;
    --text-secondary-color: #a0a0a0;
    --border-color: #333;
    --green: #28a745;
    --red: #dc3545;
}

/* Réinitialisation de base et styles globaux */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    line-height: 1.6;
}

.hidden {
    display: none !important;
}

/* Styles pour l'authentification */
#auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

.form-container {
    background-color: var(--surface-color);
    padding: 2.5rem;
    border-radius: 8px;
    width: 100%;
    max-width: 400px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}

.form-container h1 {
    text-align: center;
    margin-bottom: 0.5rem;
}

.subtitle {
    text-align: center;
    color: var(--text-secondary-color);
    margin-bottom: 2rem;
}

.input-group {
    margin-bottom: 1.5rem;
}

.input-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.input-group input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    background-color: var(--bg-color);
    border-radius: 4px;
    color: var(--text-color);
    font-size: 1rem;
}

.btn-primary {
    width: 100%;
    padding: 0.8rem;
    border: none;
    background-color: var(--primary-color);
    color: white;
    font-size: 1rem;
    font-weight: 700;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-primary:hover {
    background-color: #0056b3;
}

.toggle-link {
    text-align: center;
    margin-top: 1.5rem;
    font-size: 0.9rem;
}

.toggle-link a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
}

/* Styles pour l'application principale */
#app-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1.5rem;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
}

.logo {
    font-size: 1.5rem;
    font-weight: 700;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.btn-secondary {
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
}

.btn-secondary:hover {
    background-color: var(--primary-color);
    color: white;
}

section {
    background-color: var(--surface-color);
    padding: 1.5rem;
    border-radius: 8px;
    margin-top: 2rem;
}

h2 {
    margin-bottom: 1rem;
}

#portfolio-value {
    font-size: 2rem;
    font-weight: 700;
}

/* Styles pour le tableau des cryptos */
#crypto-table-container {
    overflow-x: auto; /* Pour la responsivité sur petits écrans */
}

.crypto-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
}

.crypto-table th, .crypto-table td {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.crypto-table th {
    color: var(--text-secondary-color);
}

.coin-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.coin-info img {
    width: 32px;
    height: 32px;
}

.positive { color: var(--green); }
.negative { color: var(--red); }

/* Indicateur de chargement (Spinner) */
#loader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.spinner {
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top: 4px solid var(--primary-color);
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsivité simple */
@media (max-width: 600px) {
    .form-container {
        padding: 1.5rem;
    }
    header {
        flex-direction: column;
        gap: 1rem;
    }
}```

---

### **Étape 3 : Le Fichier `auth.js`**

Ce script gère l'initialisation de Firebase, l'inscription (avec création du portefeuille sur Firestore), la connexion, et la logique pour afficher/cacher les formulaires.

```javascript
// auth.js

// -- DÉBUT DE LA CONFIGURATION FIREBASE --
// IMPORTANT: Remplacez ceci par la configuration de VOTRE projet Firebase
const firebaseConfig = {
    apiKey: "VOTRE_API_KEY",
    authDomain: "VOTRE_AUTH_DOMAIN",
    projectId: "VOTRE_PROJECT_ID",
    storageBucket: "VOTRE_STORAGE_BUCKET",
    messagingSenderId: "VOTRE_MESSAGING_SENDER_ID",
    appId: "VOTRE_APP_ID"
};

// Initialisation des services Firebase
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();
// -- FIN DE LA CONFIGURATION FIREBASE --


// --- SÉLECTION DES ÉLÉMENTS DU DOM ---
const loader = document.getElementById('loader');

const loginView = document.getElementById('login-view');
const signupView = document.getElementById('signup-view');
const loginForm = document.getElementById('login-form');
const signupForm = document.getElementById('signup-form');

const showSignupLink = document.getElementById('show-signup');
const showLoginLink = document.getElementById('show-login');


// --- FONCTIONS UTILITAIRES ---
const showLoader = () => loader.classList.remove('hidden');
const hideLoader = () => loader.classList.add('hidden');


// --- GESTION DES ÉVÉNEMENTS ---

// Logique pour alterner entre les vues de connexion et d'inscription
showSignupLink.addEventListener('click', (e) => {
    e.preventDefault();
    loginView.classList.add('hidden');
    signupView.classList.remove('hidden');
});

showLoginLink.addEventListener('click', (e) => {
    e.preventDefault();
    signupView.classList.add('hidden');
    loginView.classList.remove('hidden');
});

// Gestion de l'inscription
signupForm.addEventListener('submit', (e) => {
    e.preventDefault();
    showLoader();

    const email = document.getElementById('signup-email').value;
    const password = document.getElementById('signup-password').value;

    auth.createUserWithEmailAndPassword(email, password)
        .then(userCredential => {
            console.log('Utilisateur inscrit :', userCredential.user.uid);
            // Création d'un portefeuille pour le nouvel utilisateur dans Firestore
            return db.collection('portfolios').doc(userCredential.user.uid).set({
                userId: userCredential.user.uid,
                cash: 10000, // Solde de départ en USD
                coins: {} // Objet pour stocker les cryptos possédées
            });
        })
        .then(() => {
            console.log('Portefeuille créé avec succès !');
            signupForm.reset();
            hideLoader();
            // L'observateur onAuthStateChanged dans app.js gérera la redirection
        })
        .catch(error => {
            hideLoader();
            alert(`Erreur d'inscription : ${error.message}`);
        });
});

// Gestion de la connexion
loginForm.addEventListener('submit', (e) => {
    e.preventDefault();
    showLoader();

    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    auth.signInWithEmailAndPassword(email, password)
        .then(userCredential => {
            console.log('Utilisateur connecté :', userCredential.user.uid);
            loginForm.reset();
            hideLoader();
            // L'observateur onAuthStateChanged dans app.js gérera la redirection
        })
        .catch(error => {
            hideLoader();
            alert(`Erreur de connexion : ${error.message}`);
        });
});